
Module MainModule
    
    '**************************************************************************
    'twinBASIC XLL UDF Demo v1.0.1
    'by Jon Johnson
    'https://github.com/fafalone/TBXLLUDF
    'Based on the Generic example from the Excel SDK
    '
    'This addin registers two functions:
    '  TBXLLUDFNumberName - Converts a whole number between 0 and MAXLONGLONG
    '         to its English name, e.g. 21 to Twenty One.
    '  TBXLLUDFRomanNumeral - Converts a whole number between 1 and MAXLONG
    '         to a Roman numeral, e.g. 9 to IX.
    '
    'This is the main module containing the UDFs and event handlers.
    'The full Excel SDK and helper functions based on the Framework example
    'are in ExcelSDK.twin. 
    'The functions to compute the return value of the UDFs are in modFuncs.
    '
    'I've added a few custom helper functions but there's a ways to go in 
    'making this friendlier. I'll work on that in future demos of more
    'advanced functionality.
    '
    ' (17 Dec 2024) Version 1.0.2 - Bug fix for (unused in this project) SDK
    '       helper functions.
    ' (16 Dec 2024) Version 1.0.1 - Initial release
    '**************************************************************************
       
    
    'General API defs; you don't need the following if you use WinDevLib
    Private Const MAXLONGLONG As LongLong = 9223372036854775807^
    Private Const MAXLONG  = &H7fffffff  ' winnt

    Private Declare PtrSafe Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (Destination As Any, Source As Any, ByVal Length As LongPtr)

 
    'Strings to register our functions:
    Private Const FuncName0 As String = "TBXLLUDFNumberName" 'Procedure
    Private Const FuncName1 As String = "UU" 'type_text
    Private Const FuncName2 As String = "TBXLLUDFNumberName" 'function_text
    Private Const FuncName3 As String = "Number to name" 'argument_text
    Private Const FuncName4 As String = "1" 'macro_type
    Private Const FuncName5 As String = "tB XLL UDF Add-In" 'category
    Private Const FuncName6 As String = "" 'shortcut_text
    Private Const FuncName7 As String = "" 'help_topic
    Private Const FuncName8 As String = "Returns the text name of a number, e.g. 1 to One" 'function_help
    Private Const FuncName9 As String = "The number to name" 'argument_help1
    
    Private Const FuncRoman0 As String = "TBXLLUDFRomanNumeral" 'Procedure
    Private Const FuncRoman1 As String = "UU" 'type_text
    Private Const FuncRoman2 As String = "TBXLLUDFRomanNumeral" 'function_text
    Private Const FuncRoman3 As String = "Number to convert" 'argument_text
    Private Const FuncRoman4 As String = "1" 'macro_type
    Private Const FuncRoman5 As String = "tB XLL UDF Add-In" 'category
    Private Const FuncRoman6 As String = "" 'shortcut_text
    Private Const FuncRoman7 As String = "" 'help_topic
    Private Const FuncRoman8 As String = "Returns the Roman numeral of a number, e.g. 9 to IX" 'function_help
    Private Const FuncRoman9 As String = "The number to convert" 'argument_help1
    
 
    [DllExport]
    Public Function xlAutoOpen() As Integer

        Dim oper(1) As XLOPER12
 
        oper(0) = GetXLString12("Welcome to the tB XLL UDF Demo!")
        oper(1) = GetXLInt12(2)

        Excel12v(xlcAlert, vbNullPtr, 2, oper)
        
        
        Dim xDLL(0) As XLOPER12
        Dim dummy(0) As XLOPER12
        
        Excel12v(xlGetName, xDLL(0), 0, dummy)
        
        
        Dim func1def(10) As XLOPER12
        func1def(0) = xDLL(0)
        func1def(1) = GetXLString12(FuncName0)
        func1def(2) = GetXLString12(FuncName1)
        func1def(3) = GetXLString12(FuncName2)
        func1def(4) = GetXLString12(FuncName3)
        func1def(5) = GetXLString12(FuncName4)
        func1def(6) = GetXLString12(FuncName5)
        func1def(7) = GetXLString12(FuncName6)
        func1def(8) = GetXLString12(FuncName7)
        func1def(9) = GetXLString12(FuncName8)
        func1def(10) = GetXLString12(FuncName9)
        
        Excel12v(xlfRegister, vbNullPtr, 11, func1def)
        
        Dim func2def(10) As XLOPER12
        func2def(0) = xDLL(0)
        func2def(1) = GetXLString12(FuncRoman0)
        func2def(2) = GetXLString12(FuncRoman1)
        func2def(3) = GetXLString12(FuncRoman2)
        func2def(4) = GetXLString12(FuncRoman3)
        func2def(5) = GetXLString12(FuncRoman4)
        func2def(6) = GetXLString12(FuncRoman5)
        func2def(7) = GetXLString12(FuncRoman6)
        func2def(8) = GetXLString12(FuncRoman7)
        func2def(9) = GetXLString12(FuncRoman8)
        func2def(10) = GetXLString12(FuncRoman9)
        
        Excel12v(xlfRegister, vbNullPtr, 11, func2def)
                
        Excel12v(xlFree, vbNullPtr, 1, xDLL)
        Return 1
    End Function
    
    [DllExport]
    Public Function xlAutoClose() As Long
        Dim operFunc1(0) As XLOPER12
        operFunc1(0) = GetXLString12(FuncName1)
        Excel12v(xlfSetName, vbNullPtr, 1, operFunc1)
        Dim operFunc2(0) As XLOPER12
        operFunc2(0) = GetXLString12(FuncName2)
        Excel12v(xlfSetName, vbNullPtr, 1, operFunc2)
        Return 1
    End Function
    
    'Return the long name of the addin
    [DllExport]
    Public Function xlAddInManagerInfo12(xAction As XLOPER12) As LongPtr 'LPXLOPER12 
        Static xInfo(0) As XLOPER12, xIntAction(0) As XLOPER12
        Dim xTmp(1) As XLOPER12
        xTmp(0) = xAction
        xTmp(1) = GetXLInt12(xltypeInt)
        Excel12v(xlCoerce, xIntAction(0), 2, xTmp)
        
        Dim w As Long
        CopyMemory w, xIntAction(0).val(0), LenB(w)
        If w = 1 Then
            xInfo(0) = GetXLString12("tB XLL Add-in")
        Else
            xInfo(0).xltype = xltypeErr
            CopyMemory xInfo(0).val(0), xlerrValue, LenB(Of Long)
        End If
        
        Return VarPtr(xInfo(0))
    End Function
    
 
    'Define our UDFs:
    [DllExport]
    Public Function TBXLLUDFNumberName(pIn As XLOPER12) As LongPtr 'LPXLOPER12
        Dim num As String
        Dim lnum As Long
        Dim dblnum As Double
        Dim xlt(0) As XLOPER12
        Dim error As XloperErrorCodes = -1
        Dim xle() As XLOPER12
        Static xResult As XLOPER12
        ReDim xle(1)
        Select Case pIn.xltype
            Case xltypeNum
                dblnum = Xloper12NumValue(pIn)
                If dblnum <= MAXLONGLONG Then
                    num = CStr(CLngLng(dblnum))
                End If
            Case xltypeInt
                lnum = Xloper12IntValue(pIn)
                num = CStr(lnum)
            Case xltypeSRef
                xle(0) = pIn
                xle(1) = GetXLInt12(xltypeInt)
                error = Excel12v(xlCoerce, xlt(0), 2, xle)
                If error = 0 Then
                    error = -1
                    lnum = Xloper12IntValue(xlt(0))
                    num = CStr(lnum)
                End If
                Excel12v(xlFree, vbNullPtr, 1, xlt)
            Case Else
                error = xlerrValue
        End Select
        
        If (error <> -1) Or (num <= 0) Then
            xResult.xltype = xltypeErr
            CopyMemory xResult.val(0), error, LenB(error)
            Return VarPtr(xResult)
        End If
        
        xResult = GetXLString12(ConvertNumberToText(num))
        Return VarPtr(xResult)
    End Function
    
    [DllExport]
    Public Function TBXLLUDFRomanNumeral(pIn As XLOPER12) As LongPtr 'LPXLOPER12
        Dim num As Long
        Dim dblnum As Double
        Dim xlt(0) As XLOPER12
        Dim error As XloperErrorCodes = -1
        Dim xle() As XLOPER12
        Static xResult As XLOPER12
        ReDim xle(1)
        Select Case pIn.xltype
            Case xltypeNum
                dblnum = Xloper12NumValue(pIn)
                If dblnum < MAXLONG Then
                    num = CStr(CLng(dblnum))
                End If
            Case xltypeInt
                num = Xloper12IntValue(pIn)
            Case xltypeSRef
                xle(0) = pIn
                xle(1) = GetXLInt12(xltypeInt)
                error = Excel12v(xlCoerce, xlt(0), 2, xle)
                If error = 0 Then
                    error = -1
                    CopyMemory num, xlt(0).val(0), LenB(Of Long)
                End If
                Excel12v(xlFree, vbNullPtr, 1, xlt)
            Case Else
                error = xlerrValue
        End Select
        
        If (error <> -1) Or (num <= 0) Then
            xResult.xltype = xltypeErr
            CopyMemory xResult.val(0), error, LenB(error)
            Return VarPtr(xResult)
        End If
        
        xResult = GetXLString12(num_getroman(num))
        Return VarPtr(xResult)
    End Function
    
End Module
